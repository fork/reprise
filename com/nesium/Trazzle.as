package com.nesium{	import flash.net.Socket;		import flash.net.XMLSocket;	import flash.xml.XMLNode;	import flash.system.System;	import flash.events.Event;		public class Trazzle	{			/***************************************************************************		*							public properties							   *		***************************************************************************/		public static var g_host : String = 'localhost';		public static var g_port : Number = 3456;				/***************************************************************************		*							private properties							   *		***************************************************************************/		private static var g_connecting : Boolean = false;		private static var g_connected : Boolean = false;		private static var g_socket : XMLSocket;		private static var g_buffer : Array;		private static var g_nodeFactory : XML;		private static var g_levels : Object =		{			d : 'debug',			i : 'info',			n : 'notice',			w : 'warning',			e : 'error',			c : 'critical',			f : 'fatal'		};								/***************************************************************************		*							public methods								   *		***************************************************************************/		public function Trazzle() {}						public static function trace(msg:String, method:String, file:String, line:Number, ts:String) :void		{			if (ts == null)			{				var date : Date = new Date();				ts = date.getHours() + ':' + date.getMinutes() + ':' + 					date.getSeconds() + ':' + date.getMilliseconds();			}						if (!g_connected)			{				if (!g_buffer)				{					g_buffer = [];				}				g_buffer.push(arguments);				connect();				return;			}						var level : String = '';			var methodParts : Array = method.split('::');			var clazz : String = methodParts[0];			method = methodParts[1];						var encodeHTML : Boolean = true;			if (msg.charAt(0) == '#')			{				msg = msg.substr(1);				encodeHTML = false;			}						if (msg.charAt(1) == ' ')			{				level = g_levels[msg.charAt(0)] || '';				msg = msg.substr(2);			}						if (!g_nodeFactory)			{				g_nodeFactory = new XML();			}						var node : XMLNode = g_nodeFactory.createElement('log');			node.attributes.level = level;			node.attributes.line = line;			node.attributes.ts = ts;			node.attributes['class'] = clazz;			node.attributes.method = method;			node.attributes.file = file;			node.attributes.encodehtml = encodeHTML ? 'true' : 'false';			var messageNode : XMLNode = g_nodeFactory.createTextNode(msg);			node.appendChild(messageNode);						g_socket.send(node.toString() + '\n');		}								/***************************************************************************		*							private methods								   *		***************************************************************************/		private static function connect() : void		{			if (g_connecting || g_connected)			{				return;			}			//			System.security.loadPolicyFile('xmlsocket://' + g_host + ':' + g_port);						g_connecting = true;			g_socket = new XMLSocket();//			g_socket['owner'] = Trazzle;						g_socket.addEventListener(Event.CONNECT, socket_connect);			g_socket.addEventListener(Event.CLOSE, socket_disconnect);			//			g_socket.onConnect = function() {this.owner.socket_connect()};//			g_socket.onClose = function() {this.owner.socket_disconnect()};			g_socket.connect(g_host, g_port);		}		private static function flushBuffer() : void		{			var i : Number = 0;			for (; i < g_buffer.length; i++)			{				Trazzle.trace.apply(null, g_buffer[i]);			}		}								/***************************************************************************		*									events								   *		***************************************************************************/		private static function socket_connect() : void		{			g_connecting = false;			g_connected = true;			flushBuffer();			}				private static function socket_disconnect() : void		{			g_connected = false;		}	}}